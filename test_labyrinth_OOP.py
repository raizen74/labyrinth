import time

from labyrinth_OOP import Solution

start_time = time.time()
# print(f"Start time: {start_time:.6f}")

test1 = [
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    ["#", ".", ".", ".", "#", ".", ".", ".", "."],
    [".", ".", ".", ".", "#", ".", ".", ".", "."],
    [".", "#", ".", ".", ".", ".", ".", "#", "."],
    [".", "#", ".", ".", ".", ".", ".", "#", "."],
]
s = Solution(test1)
print(f"Shortest path distance: {s.bfs()}")  # 11

test2 = [
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    ["#", ".", ".", ".", "#", ".", ".", "#", "."],
    [".", ".", ".", ".", "#", ".", ".", ".", "."],
    [".", "#", ".", ".", ".", ".", ".", "#", "."],
    [".", "#", ".", ".", ".", ".", ".", "#", "."],
]
s2 = Solution(test2)
print(f"Shortest path distance: {s2.bfs()}")  # -1

test3 = [[".", ".", "."], [".", ".", "."], [".", ".", "."]]
s3 = Solution(test3)
print(f"Shortest path distance: {s3.bfs()}")  # 2

test4 = [
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", "#", ".", ".", ".", ".", "#", ".", ".", "."],
    [".", "#", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", "#", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", "#", ".", ".", ".", "#", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", "#", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
]
s4 = Solution(test4)
print(f"Shortest path distance: {s4.bfs()}")  # 16

end_time = time.time()

execution_time = end_time - start_time
# print(f"End time: {end_time:.6f}")
print(f"Function execution time: {execution_time:.6f} seconds")
